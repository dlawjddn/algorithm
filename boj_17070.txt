문제 설명 :
파이프를 맵의 좌상단에서 우하단으로 옮기는 문제인데 옮기는 방법이 아래 오른쪽, 오른쪽 아래 대각선, 이렇게 세 방법으로 움직일 수 있으며 오른쪽 대각선으로 움직 일때 현재 위치의 아래와 오른쪽에 벽이 있으면 안된다. 이러한 이동방법에 대한 제약으로 갖고 움직 일때, 우하단에 도착하는 방법이 몇개가 있는지 카운트 하는 문제이다.

주관적인 문제 느낌:
알고리즘 분류에 dp로 분류가 되어있어서 처음에는 dp로 생각을 하다가 주어진 문제의 범위가 작아서 충분히 브루트포스로 해결할 수 있다고 생각했다. 방문처리에 대해서 고민을 좀 했는데 이동방법이 아래, 오른쪽, 오른쪽 아래 대각선 총 3개라 내가 현재 위치에서 방문했었던 곳을 다시 돌아갈 일이 없기 때문에 방문처리에 대해서 생각하지 않아도 풀리는 문제라고 생각한다. dfs, bfs를 이용할 때 방문처리에 대한 강박 같은게 있었는데 이 문제를 통해 방문처리에 대한 확실한 개념이 잡힌 것 같다. 

1 success
